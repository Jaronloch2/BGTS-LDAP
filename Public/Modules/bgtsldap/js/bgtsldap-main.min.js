(function(){
	angular.module("bgtsldap",["ui.bootstrap","ngCookies","defaultTools","ui.router"])
	.config(function($stateProvider, $urlRouterProvider) {
		$stateProvider
			.state('bgtsldap-loginform', {
				url: '/bgtsldap/loginform',
				templateUrl: 'bgtsldap/loginform',
				data: {
					modal: "BGTSLoginModal",
					requireLogin: true,
					popup: true,
					redirectTo: "root" 
				}
			})
			.state('bgtsldap-logoutform', {
				url: 'bgtsldap/logoutform',
				templateUrl: 'bgtsldap/logoutform',
				data: {
					modal: "BGTSLogoutModal",
					requireLogin: true,
					popup: true,
					redirectTo: "root" 
				}
			})
			.state('bgtsldap-registerform', {
				url: '/bgtsldap/registerform',
				templateUrl: 'bgtsldap/registerform',
				data: {
					modal: "BGTSRegisterModal",
					requireLogin: true,
					popup: true,
					redirectTo: "root" 
				}
			})
	})
	.run(['$rootScope','Ldapdomains','SyncSession',function($rootScope,Ldapdomains,SyncSession){
		SyncSession.check('bgtsldapUser',true);
		Ldapdomains.get();
		console.log('BGTS LDAP Authentication Module v1 - injected. :)');
	}])
	.directive('bgtsLdaplogout',[function(){
		return {
			restrict: 'E',
			templateUrl: "/bgtsldap/logoutform"
		};
	}])
	.directive('bgtsLdaplogin',[function(){
		return {
			restrict: 'E',
			templateUrl: "/bgtsldap/loginform"
		};
	}])
	.directive('bgtsLdapregister',[function(){
		return {
			restrict: 'E',
			templateUrl: '/bgtsldap/registerform'
		};
	}])
	.service('Ldapdomains',["$http","$rootScope",function($http,$rootScope){
		var domains	= this;
		domains.get	= function(){
			var ret	= '';
			$http.get('/bgtsldap/domains').then(function(response){
				$rootScope.bgtsldapdomains	=  response
			},function(error){});
		}
	}])
	.service("BGTSRegisterModal",["$rootScope","$cookies","$uibModal","SyncSession",function($rootScope,$cookies,$uibModal,SyncSession){
		function confirmed(user) {
			console.log("You are now Registered");
			return user;
		}
		return function(backdrop,keyboard) {
			var instance = $uibModal.open({
				templateUrl: '/bgtsldap/registerform',
				backdrop: backdrop,
				keyboard: keyboard,
				controller: 'RegisterController',
				controllerAs: 'RegisterCtrl'
			});
			return instance.result.then(confirmed);
		};
	}])
	.service("BGTSLoginModal",["$rootScope","$cookies","$uibModal","SyncSession",function($rootScope,$cookies,$uibModal,SyncSession){
		function confirmed(user) {
			console.log("You are now logged in")
			return user;
		}
		return function(backdrop,keyboard) {
			var instance = $uibModal.open({
				templateUrl: '/bgtsldap/loginform',
				backdrop: backdrop,
				keyboard: keyboard,
				controller: 'LoginController',
				controllerAs: 'LoginCtrl'
			});
			return instance.result.then(confirmed);
		};
	}])
	.service("BGTSLogoutModal",["$rootScope","$cookies","$uibModal","SyncSession",function($rootScope,$cookies,$uibModal,SyncSession){
		function confirmed(user) {
			console.log("You are now logged out")
			return user;
		}
		return function(backdrop,keyboard) {
			var instance = $uibModal.open({
				templateUrl: '/bgtsldap/logoutform',
				backdrop: backdrop,
				keyboard: keyboard,
				controller: 'LogoutController',
				controllerAs: 'LogoutCtrl'
			});
			return instance.result.then(confirmed);
		};
	}])
	.service("SyncSession",["$cookies","$rootScope","CompareObjects","$http",function($cookies,$rootScope,CompareObjects,$http){
		var sync	= this;
		sync.set	= function(name, obj){
			$cookies.putObject(name, obj);
			$rootScope[name]	= obj;
		};
		sync.unset	= function(name){
			$cookies.remove(name, { path: '/' });
			$rootScope[name]	= undefined;
			console.log("If there was a cookie named "+name+" here, it has been exterminated by now.");
		};
		sync.check	= function(name,strict){
			if($cookies.get(name)!==undefined){
				var cookie	= JSON.parse($cookies.get(name));				
				$http.get("/bgtsldap/syncsession/" + name).then(function(response){
					var synced	= CompareObjects(cookie,response.data);
					if(synced){
						console.log(name.toUpperCase() + " Client and Server are Synced, continue");
						$rootScope[name]	= cookie;
					}else{
						if(strict){
							console.log("Session is not Synced");
							sync.unset(name);
						}else{
							console.log(name + " has a value and it's fine.");
						}
					}
				});
			}else{
				$http.post("/bgtsldap/forgetkey/", {'key':name}).then(function(response){
					console.log("Since there was no cookie named "+name+" here. I asked the Server to forget about its twin there too.");
					sync.unset(name);
				});
			}
		}
	}])
	.run(["$rootScope","$cookies","$state","BGTSLoginModal","BGTSLogoutModal","$injector",function($rootScope,$cookies,$state,BGTSLoginModal,BGTSLogoutModal,$injector){
		$rootScope.$on('$stateChangeStart', function (event, toState, toParams) {
			$rootScope.pagelocation	= toState.name;
			if(toState.data!==undefined){
				var modal	= toState.data.modal;
				var requireLogin	= toState.data.requireLogin;
				var popup	= toState.data.popup;
				if(requireLogin && $cookies.getObject("bgtsldapUser")===undefined){
					BGTSLoginModal(true,true);
					event.preventDefault();
				}else{
					if(popup){
						$injector.get(modal)(true,true);
						event.preventDefault();
					}
				}
			}
		});
	}])
	.controller("RegisterController",["$http","$cookies","$scope","$rootScope","SyncSession","PopupModal",function($http,$cookies,$scope,$rootScope,SyncSession,PopupModal){
		var registerCtrl				= this;
		registerCtrl.user				= {};
		registerCtrl.user.password		= "ldappasswordlang";
		registerCtrl.user.csrf_token	= angular.element('#csrf_token').val();
		registerCtrl.register			= function(){
			console.log(registerCtrl.user);
			$http.post("/bgtsldap/register",registerCtrl.user).then(function(response){
				if(response.data.return){
					PopupModal.show("Success!","User " + registerCtrl.user.fname + " " + registerCtrl.user.lname + " has been added",true,true);
					registerCtrl.user				= {};
				}else{
					PopupModal.show("Oops!",response.data.summary,true,true);
				}
			},function(error){
				PopupModal.show("Oops!",error.data,true,true);
			});
		};
	}])
	.controller("LoginController",["$http","$cookies","$scope","$rootScope","SyncSession","PopupModal",function($http,$cookies,$scope,$rootScope,SyncSession,PopupModal){
		var loginCtrl				= this;
		loginCtrl.user				= {};
		loginCtrl.user.domain		= "Choose a Domain";
		loginCtrl.user.password		= "ldappasswordlang";
		loginCtrl.user.csrf_token	= angular.element('#csrf_token').val();
		loginCtrl.logIn	= function(){
			$http.post("/bgtsldap/login",loginCtrl.user).then(function(response){
				if(response.data.return){
					var bgtsldapUser	= response.data.data;
					SyncSession.set('bgtsldapUser',bgtsldapUser);
					loginCtrl.user				= {};
					PopupModal.show(response.data.type.toUpperCase(),response.data.summary,false,'static').then(function(){
						SyncSession.check('bgtsldapUser',true);
						window.location.href="/";
					}, function(){
						SyncSession.check('bgtsldapUser',true);
						window.location.href="/";
					});
				}else{
					PopupModal.show(response.data.type.toUpperCase(),response.data.summary,true,true)
				}
			});
		};
	}])
	.controller("LogoutController",["$http","$cookies","$scope","$rootScope","SyncSession","PopupModal",function($http,$cookies,$scope,$rootScope,SyncSession,PopupModal){
		var logoutCtrl	= this;
		logoutCtrl.logOut	= function(){
			$http.get("/bgtsldap/logout").then(function(response){	
				if(response.data.return){
					PopupModal.show(response.data.type.toUpperCase(),response.data.summary,false,'static').then(function(){
						SyncSession.check('bgtsldapUser',true);
						SyncSession.unset('bgtsldapUser');
						window.location.href="/";
					}, function(){
						SyncSession.check('bgtsldapUser',true);
						SyncSession.unset('bgtsldapUser');
						window.location.href="/";
					});
				}else{
					PopupModal.show(response.data.type.toUpperCase(),response.data.summary,true,true)
				}
			});
		};
	}])
})();